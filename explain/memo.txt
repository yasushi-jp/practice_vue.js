●Hello World
------------------------------------------------------------------
Vue.js を読み込む
1-1
<script> 要素で Vue.js を読み込みましょう。このブックでは unpkg.com に公開されているものを読み込みます。

HINT
Vue.js は UI を構築するためのライブラリです。

JavaScript 内のデータと HTML を自動的に結びつけ、複雑な UI の実装も簡単にできるのが特徴です。

また、プログレッシブフレームワークとも呼ばれ、小さな Web ページから大きなアプリケーションまで、柔軟に適用できるように設計されています。

公式サイト
https://vuejs.org/
公式サイト(日本語)
https://jp.vuejs.org/index.html
TIPS
https://unpkg.com/vue からは npm に公開されている最新版の Vue.js を取得することができます。
もし、特定の版を使用したいときには、例えば https://unpkg.com/vue@2.4.1 のように指定することができます。

------------------------------------------------------------------

インスタンスをつくる
1-2
Vue.js を動かすために、まずはグローバルに定義された Vue コンストラクタからインスタンスを作ってみましょう。

HINT
JavaScript では new 演算子を使うことでインスタンスを作ることができます。

------------------------------------------------------------------

データを定義する
1-3
インスタンスをつくる時に、引数にオプションを渡すことでデータを定義することができます。data オプションを使って、'Hello World!' という文字列を持った message という名前のデータを定義しましょう。

------------------------------------------------------------------

HTML テンプレートをつくる
1-4
インスタンスの message に格納されたデータを表示するための HTML テンプレートをつくりましょう。Vue.js では Mustache 記法 ({{ }}) を使ってインスタンスのデータを参照することができます。

HINT
Mustache 記法の中ではインスタンスが持つプロパティを使用することができます。インスタンスが message を持っている時、HTML 内に {{ message }} と書くと、message の内容が HTML に表示されます。

また、この記法の中では通常の JavaScript と同様の処理を行うことができます。例えば、以下のように文字列の連結なども書くことができます。

<p>{{ message + '!!!' }}</p>

------------------------------------------------------------------

テンプレートとインスタンスを結びつける
1-5
前のセクションまでのコードではテンプレートとインスタンスの結びつけがされていなかったため、Hello World が表示されませんでした。

インスタンスに el オプションを指定し、使用するテンプレートを指定しましょう。

TIPS
el オプションには CSS セレクタ、または、DOM 要素を指定することができます。今回のコードでは id に app を持つ要素を指定しています。

------------------------------------------------------------------

双方向データバインディング
1-6
おめでとうございます！ Hello World が表示されましたね。あと一つ、Vue.js のおもしろい機能を使ってみましょう。

input 要素に v-model という属性をつけることで、インスタンス上のデータと input 要素の入力値を同期することができます。これを双方向データバインディングと呼びます。

v-model を使って message の値をフォームに結びつけ、実際に値を変えてみましょう。

HINT
v-model にはインスタンス上のデータの名前を渡すことで、データと入力フォームの結びつけをすることができます。例えば、以下のように書いた時、

<input type="text" v-model="message">
message が更新されたときには input 上の入力値も更新されますし、逆に input に値が入力されると message も更新されます。

TIPS
v-model のように先頭に v- が付いている属性はディレクティブと呼ばれ、通常の HTML 属性とは異なった動作をします。
------------------------------------------------------------------

●インスタンス
------------------------------------------------------------------
インスタンスメソッド
2-1
methods オプションを指定することで、インスタンスメソッドを定義することができます。

データ items に要素を追加するメソッド addItem を定義してみましょう。

HINT
Vue.js のインスタンスメソッドの中では this を使ってインスタンスにアクセスすることができます。

TIPS
ここで定義した addItem メソッドは HTML 側のボタンに関連付けられているので、ボタンをクリックすることでアイテムが追加されます。

<form v-on:submit.prevent="addItem(input)">
  <input type="text" v-model="input">
  <button type="submit">追加</button>
</form>
HTML 側で使用している v-for, v-on の機能については3章で説明します。

------------------------------------------------------------------

算出プロパティ
2-2
computed オプションを指定することで、算出プロパティを定義することができます。算出プロパティとは、あるデータや別の算出プロパティから計算される新たなデータのことです。

インスタンスのデータが更新されると、それに依存している算出プロパティも更新されます。

message をすべて大文字にする算出プロパティ、upperMessage を定義してみましょう。

TIPS
computedオプションを設定した算出プロパティもインスタンス上のデータの一種となるため、テンプレートから次のように直接呼び出すことが可能です。

<p>初めての Vue.js</p>
<p>{{ message }}</p>
<p>{{ upperMessage }}</p>

------------------------------------------------------------------

ウォッチャー
2-3
watch オプションを指定することで、データや算出プロパティの変更を監視することができます。オプションのキーに変更を監視したいプロパティ名を設定すると、そのデータが更新された時に値に渡した関数が実行されます。

message が更新されたら実行されるウォッチャーを定義してみましょう。

空欄を埋めたあとにフォームに文字を入力すると、watch オプションに与えた関数が実行され、message とともに oldMessage, newMessage も更新されます。

TIPS
watch オプションに渡す関数には第一引数に更新後の値、第二引数に更新前の値が渡されます。

------------------------------------------------------------------

●テンプレート
------------------------------------------------------------------
v-for
3-1
テンプレートとは Vue.js のインスタンス上のデータを表示するための HTML ファイルのことです。テンプレート内では1章で学んだような Mustache 記法や、v- から始まる特別な属性を使用することができます。

v-for は要素の繰り返しを表現できます。

main.js 内のインスタンスに todos という配列が定義されているので、その text をリストの要素として表示してみましょう。

data: {
  todos: [
    { completed: true, text: 'Register with CODEPREP' },
    { completed: false, text: 'Learn Vue.js' }
  ]
}
todos 内の各要素は v-for 内では todo という変数に格納することにします。

HINT
v-for の値に以下のように書くことで繰り返しを表現することができます。

v-for="(value, index) in array"
array はインスタンス上の配列、value は配列から取り出されたそれぞれの値、index は配列の添字です。

index は省略することができ、そのときは括弧も省略することができます。

また、in は of と書いても良いです。

------------------------------------------------------------------

v-for (オブジェクト)
3-2
v-for はオブジェクトに対しても使うことができます。

次は main.js 内のインスタンスに vue というオブジェクトが定義されているので、その各要素を v-for を使って表示してみましょう。

data: {
  vue: {
    type: 'Library',
    lang: 'JavaScript',
    author: 'Even You'
  }
}
vue の各値は value, 各キーは key という変数に格納することにします。

HINT
v-for をオブジェクトに対しても使うときの構文は以下のようになります。

v-for="(value, key, index) in object"
object はインスタンス上のオブジェクト、value はオブジェクトのそれぞれの値、key はオブジェクトのそれぞれのキー、index は繰り返しの回数です。

key, index は省略することができ、両方を省略しているときは括弧も省略することができます。

JavaScript のオブジェクトは中の値の順番が保証されないので、オブジェクトに対して v-for を使うときは注意しましょう。

------------------------------------------------------------------

v-bind
3-3
v-bind はデータを属性の値に結びつけることができます。

最初のコードの todo 中の completed の値をチェックボックスで表示してみましょう。

HINT
v-bind はコロン (:) に続けて設定したい属性名を指定することができます。例えば、checked という属性を指定したい時は v-bind:checked と書きます。

------------------------------------------------------------------

v-bind の省略記法
3-4
v-bind はよく使う機能なので省略記法があります。結びつけたい属性名の前に 属性名の前に : をつけるだけで v-bind の機能を使用することができます。

先に書いた v-bind:checked を省略記法で書いてみましょう。

------------------------------------------------------------------

v-on
3-5
v-on を使うことでクリックやテキスト入力などのイベントが発生した時になんらかの処理を実行することができます。値にはメソッドの実行などの処理、または、実行したいメソッド名を指定することができます。

前回までのコードではチェックボックスをクリックしたときに、チェックの状態がデータに反映されていませんでした。v-on を使って change イベントが発生したら新しい値を反映させるようにしましょう。

データの変化が分かるように、todos の内容を HTML 上に表示するようにしています。

HINT
v-bind と似たように、v-on はコロン (:) の後に監視したいイベント名を指定することができます。

例えば、以下のように書くと、input 要素に change イベントが発生したときに hello メソッドが呼び出されます。

<input v-on:change="hello">
v-on の値にはメソッド名だけでなく、以下のように実際の処理を入力することもできます。また、v-on の値の中では $event という特別な変数からイベントオブジェクトを使用できます。

<!-- change イベントが発生したら、message に値を反映 -->
<input v-on:change="message = $event.target.value">

<!-- click イベントが発生したら、add メソッドに 'clicked' という値を渡して実行 -->
<button v-on:click="add('clicked')">クリック！</button>

------------------------------------------------------------------

v-on のイベント修飾子
3-6
v-on には修飾子というものをつけることができ、preventDefault() などを簡単に実行することができます。修飾子は v-on:click.prevent のように、イベント名の後に . で繋げて追加することができます。

クリックしたら todos の completed をすべて true にするアンカー要素を追加し、v-on には prevent 修飾子を追加し、ブラウザデフォルトの挙動をおこなわないようにしましょう。

completed をすべて true にするメソッドは completeAll としてすでにインスタンス内に定義されています。

------------------------------------------------------------------

v-on の省略記法
3-7
v-on も v-bind と同様に短縮記法があります。イベント名の前に @ をつけるだけで v-on の機能を使用することができます。

先に書いた todos のチェックボックスを v-on:change を省略記法で書いてみましょう。

------------------------------------------------------------------

v-model (再)
3-8
先のチェックボックスの例は、実は v-model で書くことができます。

v-bind と v-on で書いたものを v-model で書き直してみましょう。この時、チェックボックスには todo.completed を結びつけることに注意しましょう。

------------------------------------------------------------------

v-show
3-9
v-show はその値が false であるときに要素を非表示にします。

v-show を使って、チェックボックスにチェックがついているときのみ Done! というラベルを表示するようにしましょう。

TIPS
v-show と似た機能に v-if があります。v-if も値が false となるときに要素を非表示にしますが、v-show が要素を display: none; にする一方で、v-if は要素自体を削除してしまう点が異なります。

たとえば、<img> 要素を含む要素がたくさんあるときは v-if を使って画像の読み込みが発生するのを防ぐ、というような使い分けができます。

------------------------------------------------------------------

class や style に対する v-bind
3-10
class または style に対しては、値にオブジェクトを渡すことで v-bind の特別な機能を使うことができます。

<!--
  foo が true の時に class に some-class が付与される
-->
<div v-bind:class="{ 'some-class': foo }"></div>

<!--
  foo の値が style 属性の color に付与される
-->
<div v-bind:style="{ color: foo }"></div>
todo が完了しているときには done というクラスを追加しましょう。また、同じ条件で style 属性を使って取り消し線をつけるようにしてみましょう。

------------------------------------------------------------------

●フィルター
------------------------------------------------------------------

フィルターを定義する
4-1
フィルターとは与えられた値を別の文字列に変換して表示するための機能です。メソッドでも同様のことができますが、フィルターとして定義することで、テンプレート上の記法が少し読みやすくなるメリットがあります。

Vue.filter を使い、与えられた文字列の後ろに !!! をつける excited フィルターを定義してみましょう

TIPS
テンプレート側ではすでに excited フィルターが使用されているため、空欄を埋めると !!! が付きます。詳しいフィルターの使い方に関しては次の節で説明します。

<p>{{ message | excited }}</p>

------------------------------------------------------------------

フィルターを使う
4-2
フィルターは Mustache 記法、または、v-bind の中で使用することができ、フィルタを適用したい値の後ろに | フィルタ名 と入力することで使用できます。

前の節で定義した excited フィルターを、main.js で定義されている message に対して使ってみましょう。

------------------------------------------------------------------

引数を受け取るフィルターを定義する
4-3
メソッドと同様に、フィルターにも引数を渡すことができます。フィルタを定義するときに渡す関数の第二引数以降から、渡された引数を受け取ることができます。

excited フィルターを moreExcited という引数を受け取るようにし、それが true のときは値を大文字にするようにしましょう。

TIPS
ここでもテンプレート側ではすでに excited フィルターに引数が渡されているため結果を見ることができます。次の節では自分の手で書いてみましょう。

<p>{{ message | excited(true) }}</p>

------------------------------------------------------------------

フィルターに引数を渡す
4-4
実際に excited フィルターに引数 true を与えてみましょう。フィルターは通常の関数と同様の書き方で引数を与えることができます。

------------------------------------------------------------------

●コンポーネント
------------------------------------------------------------------

コンポーネントを定義する
5-1
コンポーネントは Vue.component を使うことによって定義することができます。第一引数にコンポーネント名、第二引数には new Vue に渡すオプションと同様のものが渡せます。

ToDo の一要素を todo-item というコンポーネントとして定義してみましょう。

ここで注意すべきなのは、今まで HTML 内に書いていたテンプレートを template オプションに渡している点です。

TIPS
HTML にテンプレートを定義していたときと比較して JavaScript の文字列を template に渡すのは読みづらくなってしまいます。しかし、もし ES2015 が使用できる環境なら、テンプレートリテラルを使用することでもう少し読みやすくすることができます。

{
  template: `<div>
    <input type="checkbox" v-model="todo.completed">
    <span>{{ todo.text }}</span>
  </div>`
}

------------------------------------------------------------------

コンポーネントを使う
5-2
定義した todo-item コンポーネントを使用してみましょう。

Vue.component で定義したコンポーネントは通常の HTML 要素と同様に <todo-item></todo-item> というように書くことで使うことができます。

この節ではまだ todo-item は表示されません。

------------------------------------------------------------------

props の定義
5-3
<todo-item> をテンプレートに書いたのに表示されないのはなぜでしょうか？それは、コンポーネントが ToDo のデータを持っていないからです。

コンポーネントはルートのインスタンス (new Vue で作成したインスタンス) とは異なるデータを持っているため、ToDo のデータを表示するためにはコンポーネントにデータを渡す必要があります。

データを渡すには props というオプションをコンポーネントの定義に書き込みます。props にはプロパティとして受け取るデータの名前を配列として渡します。

<todo-item> が todo というプロパティを受け取れるようにしましょう。

------------------------------------------------------------------

データを props として渡す
5-4
次は <todo-item> にデータ todo を渡しましょう。データをコンポーネントに渡すには、v-bind を使って属性値として渡すことができます。

------------------------------------------------------------------

props のバリデーション
5-5
props にはプロパティの名前以外にもデータの型 (文字列、数値など) を指定し、それを満たさない場合はエラーを出すなどのバリデーションをおこなうことができます。

例えば、message というプロパティは文字列を必ず渡さなければならないという定義をするには以下のように書くことができます。

{
  props: {
    message: {
      type: String,
      required: true
    }
  }
}
先に書いた props にバリデーションを追加して、todo にはオブジェクトを必ず渡さなければならないという条件を設定しましょう。

------------------------------------------------------------------

カスタムイベントの発動
5-6
props によってコンポーネントにデータを入力することができるようになりましたが、逆にコンポーネントから出力を行うときにはどうすれば良いのでしょうか？

このような時、カスタムイベントを使うことができます。カスタムイベントを使うことでコンポーネントの中で何かが起こったときに、それを任意のデータとともに親に伝えることができます。

カスタムイベントを発動させるにはインスタンスの $emit メソッドを使用します。第一引数にイベント名、第二引数以降にはイベントのコールバックに渡すデータを指定することができます。

<todo-item> のチェックボックスのチェック状態が変更されたら、onChange メソッドを実行し、その中で todo-change というカスタムイベントを発動してみましょう。

カスタムイベントを受け取る側の実装は6章で行います。

------------------------------------------------------------------

●ToDo アプリケーションをつくろう
------------------------------------------------------------------

Todo を追加するための要素を追加する
6-1
ここまででいくつか ToDo アプリケーションの部品として使えそうなものが作成できました。それらを組み合わせて簡単な ToDo アプリケーションを作成してみましょう。

5章で作成した <todo-item> コンポーネントは既に index.html, main.js に追加されています。

index.html に新たな ToDo を入力するためのテキストフィールドとボタンを追加してみましょう。

------------------------------------------------------------------

入力を保持するデータを定義する
6-2
テキストフィールドの内容は input という名前で保存することにします。

data に input を加えてみましょう。

TIPS
アプリ起動時には必要ない値でも、空文字や null などなんらかの値を data に入れることが必要です。

時には面倒な時もありますが、そのインスタンスで使用されているデータがひと目で分かるというメリットがあります。

------------------------------------------------------------------

テキストフィールドとデータを結びつける
6-3
テキストフィールドと input を v-model で結びつけましょう。

------------------------------------------------------------------

ToDo を追加するメソッドを定義する
6-4
次は ToDo を追加する処理をインスタンスメソッドとして定義しましょう。

addTodo という名前で定義することにします。

HINT
インスタンスメソッドを定義するには methods オプションを使用します。

------------------------------------------------------------------

ボタンをメソッドを結びつける
6-5
ボタンをクリックされたら addTodo メソッドが実行されるようにしましょう。

HINT
イベントを監視するためには v-on を使用します。

------------------------------------------------------------------

ToDo を削除するためのボタンを追加する
6-6
次はもう少し機能を増やして <todo-item> の中に削除ボタンをつくってみましょう。

------------------------------------------------------------------

ToDo を削除するカスタムイベントの発動
6-7
<todo-item> の中の削除ボタンがクリックされたら onClickRemove メソッドを呼び出し、その中で remove カスタムイベントを発動してみましょう。

HINT
カスタムイベントを発動するには $emit インスタンスメソッドを使用します。

------------------------------------------------------------------

ToDo を削除する
6-8
ルートのインスタンスから <todo-item> の remove イベントを監視し、イベントが発動したら該当の ToDo を削除しましょう。

------------------------------------------------------------------

